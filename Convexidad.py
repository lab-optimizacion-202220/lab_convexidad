# -*- coding: utf-8 -*-
"""formas_cuadraticas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/lab-optimizacion-202220/lab_formas_cuadraticas/blob/main/formas_cuadraticas.ipynb

# LABORATORIO CONVEXIDAD

## Sebastian Guayacan Mesa 202014394

## Andreś Felipe Cordero Martinez 202011880
"""

from matplotlib import pylab, mlab
import matplotlib.pyplot as plt
from pylab import *
from scipy.optimize import linprog
import numpy as np
import math 
from math import factorial
from scipy.optimize import minimize
from matplotlib import cm
import sympy as sym
from itertools import combinations
import pandas as pd
import time
from IPython.display import display

"""# Primer punto

Evalué esta función sobre segmentos de recta entre dos puntos x1 = (x1, y1) y x2 = (x2, y2).
"""

def punto_1(x1,x2):
  # Se extraen los puntos de x1 y x2
  x_inicial = x1[0]
  x_final = x2[0]
  y_inicial = x1[1]
  y_final = x2[1]
  # Se crean los vectores de x y y
  vx = np.linspace(x_inicial,x_final,100)
  vy = np.linspace(y_inicial,y_final,100)
  # Se crea la linea f(x) y el vector sobre el cual sera graficado
  fx = np.linspace(0,0,100)
  graphx = np.linspace(1,2,len(vx))
  for i in range(0,len(vx)):
    fx[i] = 3*((1 - vx[i])**2) * math.exp(-(vx[i]**2)-(vy[i]+1)**2) - 10 * (vx[i]/5 - vx[i]**3 - vy[i]**5) * math.exp(-(vx[i]**2)-(vy[i]**2)) - 1/3 * math.exp(-(vx[i]+1)**2-(vy[i]**2))
  # Se encuentran los valores en f(x) de x1 y x2
  y1 = 3*((1 - x_inicial)**2) * math.exp(-(x_inicial**2)-(y_inicial+1)**2) - 10 * (x_inicial/5 - x_inicial**3 - y_inicial**5) * math.exp(-(x_inicial**2)-(y_inicial**2)) - 1/3 * math.exp(-(x_inicial+1)**2-(y_inicial**2))
  y2 = 3*((1 - x_final)**2) * math.exp(-(x_final**2)-(y_final+1)**2) - 10 * (x_final/5 - x_final**3 - y_final**5) * math.exp(-(x_final**2)-(y_final**2)) - 1/3 * math.exp(-(x_final+1)**2-(y_final**2))
  x = [1, 2]
  y = [y1, y2]
  plt.plot(x,y,color="red")
  plt.plot(graphx,fx)
  plt.show()

"""## a)

"""

x1 = np.array([1/10,-1])
x2 = np.array([-11/10,-1])
punto_1(x1,x2)

"""###### En el intervalo del literal a se observa que la función gamma es concava globalmente

## b)
"""

x1 = np.array([-11/10,17/10])
x2 = np.array([12/10,-17/10])
punto_1(x1,x2)

"""###### En el intervalo del literal b se observa que la función gamma es indefinida. Sin embargo, si agregamos un punto por cada interseción que se da entre la función gamma y la recta entre x1 y x2 se podria definir que la función es gamma es localmente concava entre x1 y x3, convexa entre x3 y x4, concava entre x4 y x5, y para finalizar, convexa entre x5 y x2.

## c)
"""

x1 = np.array([1,-1])
x2 = np.array([-16/10,3/5])
punto_1(x1,x2)

"""###### En el intervalo del literal c se observa que la función gamma es indefinida. Sin embargo, si agregamos un punto x3 en la interseción que se da entre la función gamma y la recta entre x1 y x2 se podria definir que la función es gamma es localmente concava entre x1 y x3. Mientras que entre x3 y x2 es concava.

## d)
"""

x1 = np.array([0,13/5])
x2 = np.array([0,-12/5])
punto_1(x1,x2)

"""###### En el intervalo del literal d se observa que la función gamma es indefinida. Sin embargo, si agregamos un punto x3 en la interseción que se da entre la función gamma y la recta entre x1 y x2 se podria definir que la función es gamma es localmente concava entre x1 y x3. Mientras que entre x3 y x2 es concava. Sin embargo, cabe resaltar que entre el lapso de x1 y x3 la función gamma posee multiples puntos de inflexión que si se analizará la función tomando intervalos entre los puntos de inflexión se podrian encontrar zonas concavas y convexas en ese intervalo entre x1 y x3

# Segundo Punto
"""

xa = [1/10, -11/10]
ya = [-1, -1]
xb = [-11/10, 12/10]
yb = [17/10, -17/10]
xc = [1, -16/10]
yc = [-1, 3/5]
xd = [0, 0]
yd = [13/5, -12/5]
plt.title("Contorno función gamma")
plt.plot(xa,ya,"--",color="red")
plt.plot(xb,yb,"--",color="orange")
plt.plot(xc,yc,"--",color="green")
plt.plot(xd,yd,"--",color="blue")
xcont = np.linspace(-3,3,100)
ycont = np.linspace(-3,3,100)
X,Y = np.meshgrid(xcont,ycont)
Z = 3*(1-X) **2  * np.exp(-(X**2)-(Y + 1) **2 ) - 10 * (X/5 - X **3 - Y **5  ) * np.exp(-X **2 - Y **2) - 1/3 * (np.exp(-(X+1) **2 - Y ** 2 ))
ax=plt.contour(xcont,ycont,Z)
plt.colorbar(ax,shrink=0.5,aspect=5)
plt.legend(["a", "b", "c", "d"])

"""###### En la anterior grafica se observan las curvas de nivel de la función gamma en el intervalo [-3,3]^2 y las correspondientes rectas para realizar las pruebas de convexidad entre de los literales a, b, c y d del punto 1"""